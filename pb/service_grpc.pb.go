// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IdentityServiceClient is the client API for IdentityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IdentityServiceClient interface {
	// Get/Put operations
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Elections
	GetPid(ctx context.Context, in *PidRequest, opts ...grpc.CallOption) (*PidResponse, error)
	GetLeader(ctx context.Context, in *LeaderRequest, opts ...grpc.CallOption) (*LeaderResponse, error)
	GetHeartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error)
	UpdateLeader(ctx context.Context, in *NewLeaderAnnouncement, opts ...grpc.CallOption) (*GenericResponse, error)
	RequestElection(ctx context.Context, in *ElectionRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	// Replication and synchronization
	GetVectorClock(ctx context.Context, in *VectorClockRequest, opts ...grpc.CallOption) (*VectorClockResponse, error)
	UpdateVectorClock(ctx context.Context, in *VectorClockRequest, opts ...grpc.CallOption) (*VectorClockResponse, error)
	RequestSync(ctx context.Context, in *RequestSyncRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	SyncComplete(ctx context.Context, in *SyncCompleteRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Distributed checkpointing
	RequestCheckpoint(ctx context.Context, in *CheckpointRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	NotifyCheckpointDone(ctx context.Context, in *CheckpointDoneRequest, opts ...grpc.CallOption) (*GenericResponse, error)
}

type identityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIdentityServiceClient(cc grpc.ClientConnInterface) IdentityServiceClient {
	return &identityServiceClient{cc}
}

func (c *identityServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/pb.IdentityService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/pb.IdentityService/Put", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) GetPid(ctx context.Context, in *PidRequest, opts ...grpc.CallOption) (*PidResponse, error) {
	out := new(PidResponse)
	err := c.cc.Invoke(ctx, "/pb.IdentityService/GetPid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) GetLeader(ctx context.Context, in *LeaderRequest, opts ...grpc.CallOption) (*LeaderResponse, error) {
	out := new(LeaderResponse)
	err := c.cc.Invoke(ctx, "/pb.IdentityService/GetLeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) GetHeartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error) {
	out := new(HeartbeatResponse)
	err := c.cc.Invoke(ctx, "/pb.IdentityService/GetHeartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) UpdateLeader(ctx context.Context, in *NewLeaderAnnouncement, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/pb.IdentityService/UpdateLeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) RequestElection(ctx context.Context, in *ElectionRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/pb.IdentityService/RequestElection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) GetVectorClock(ctx context.Context, in *VectorClockRequest, opts ...grpc.CallOption) (*VectorClockResponse, error) {
	out := new(VectorClockResponse)
	err := c.cc.Invoke(ctx, "/pb.IdentityService/GetVectorClock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) UpdateVectorClock(ctx context.Context, in *VectorClockRequest, opts ...grpc.CallOption) (*VectorClockResponse, error) {
	out := new(VectorClockResponse)
	err := c.cc.Invoke(ctx, "/pb.IdentityService/UpdateVectorClock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) RequestSync(ctx context.Context, in *RequestSyncRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/pb.IdentityService/RequestSync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) SyncComplete(ctx context.Context, in *SyncCompleteRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/pb.IdentityService/SyncComplete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) RequestCheckpoint(ctx context.Context, in *CheckpointRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/pb.IdentityService/RequestCheckpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) NotifyCheckpointDone(ctx context.Context, in *CheckpointDoneRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/pb.IdentityService/NotifyCheckpointDone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IdentityServiceServer is the server API for IdentityService service.
// All implementations must embed UnimplementedIdentityServiceServer
// for forward compatibility
type IdentityServiceServer interface {
	// Get/Put operations
	Get(context.Context, *GetRequest) (*GetResponse, error)
	Put(context.Context, *PutRequest) (*empty.Empty, error)
	// Elections
	GetPid(context.Context, *PidRequest) (*PidResponse, error)
	GetLeader(context.Context, *LeaderRequest) (*LeaderResponse, error)
	GetHeartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error)
	UpdateLeader(context.Context, *NewLeaderAnnouncement) (*GenericResponse, error)
	RequestElection(context.Context, *ElectionRequest) (*GenericResponse, error)
	// Replication and synchronization
	GetVectorClock(context.Context, *VectorClockRequest) (*VectorClockResponse, error)
	UpdateVectorClock(context.Context, *VectorClockRequest) (*VectorClockResponse, error)
	RequestSync(context.Context, *RequestSyncRequest) (*empty.Empty, error)
	SyncComplete(context.Context, *SyncCompleteRequest) (*empty.Empty, error)
	// Distributed checkpointing
	RequestCheckpoint(context.Context, *CheckpointRequest) (*GenericResponse, error)
	NotifyCheckpointDone(context.Context, *CheckpointDoneRequest) (*GenericResponse, error)
	mustEmbedUnimplementedIdentityServiceServer()
}

// UnimplementedIdentityServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIdentityServiceServer struct {
}

func (UnimplementedIdentityServiceServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedIdentityServiceServer) Put(context.Context, *PutRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedIdentityServiceServer) GetPid(context.Context, *PidRequest) (*PidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPid not implemented")
}
func (UnimplementedIdentityServiceServer) GetLeader(context.Context, *LeaderRequest) (*LeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeader not implemented")
}
func (UnimplementedIdentityServiceServer) GetHeartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHeartbeat not implemented")
}
func (UnimplementedIdentityServiceServer) UpdateLeader(context.Context, *NewLeaderAnnouncement) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLeader not implemented")
}
func (UnimplementedIdentityServiceServer) RequestElection(context.Context, *ElectionRequest) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestElection not implemented")
}
func (UnimplementedIdentityServiceServer) GetVectorClock(context.Context, *VectorClockRequest) (*VectorClockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVectorClock not implemented")
}
func (UnimplementedIdentityServiceServer) UpdateVectorClock(context.Context, *VectorClockRequest) (*VectorClockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVectorClock not implemented")
}
func (UnimplementedIdentityServiceServer) RequestSync(context.Context, *RequestSyncRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestSync not implemented")
}
func (UnimplementedIdentityServiceServer) SyncComplete(context.Context, *SyncCompleteRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncComplete not implemented")
}
func (UnimplementedIdentityServiceServer) RequestCheckpoint(context.Context, *CheckpointRequest) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestCheckpoint not implemented")
}
func (UnimplementedIdentityServiceServer) NotifyCheckpointDone(context.Context, *CheckpointDoneRequest) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyCheckpointDone not implemented")
}
func (UnimplementedIdentityServiceServer) mustEmbedUnimplementedIdentityServiceServer() {}

// UnsafeIdentityServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IdentityServiceServer will
// result in compilation errors.
type UnsafeIdentityServiceServer interface {
	mustEmbedUnimplementedIdentityServiceServer()
}

func RegisterIdentityServiceServer(s grpc.ServiceRegistrar, srv IdentityServiceServer) {
	s.RegisterService(&IdentityService_ServiceDesc, srv)
}

func _IdentityService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.IdentityService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.IdentityService/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).Put(ctx, req.(*PutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_GetPid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).GetPid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.IdentityService/GetPid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).GetPid(ctx, req.(*PidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_GetLeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).GetLeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.IdentityService/GetLeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).GetLeader(ctx, req.(*LeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_GetHeartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).GetHeartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.IdentityService/GetHeartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).GetHeartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_UpdateLeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewLeaderAnnouncement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).UpdateLeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.IdentityService/UpdateLeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).UpdateLeader(ctx, req.(*NewLeaderAnnouncement))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_RequestElection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ElectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).RequestElection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.IdentityService/RequestElection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).RequestElection(ctx, req.(*ElectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_GetVectorClock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VectorClockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).GetVectorClock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.IdentityService/GetVectorClock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).GetVectorClock(ctx, req.(*VectorClockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_UpdateVectorClock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VectorClockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).UpdateVectorClock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.IdentityService/UpdateVectorClock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).UpdateVectorClock(ctx, req.(*VectorClockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_RequestSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).RequestSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.IdentityService/RequestSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).RequestSync(ctx, req.(*RequestSyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_SyncComplete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncCompleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).SyncComplete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.IdentityService/SyncComplete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).SyncComplete(ctx, req.(*SyncCompleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_RequestCheckpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).RequestCheckpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.IdentityService/RequestCheckpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).RequestCheckpoint(ctx, req.(*CheckpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_NotifyCheckpointDone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckpointDoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).NotifyCheckpointDone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.IdentityService/NotifyCheckpointDone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).NotifyCheckpointDone(ctx, req.(*CheckpointDoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IdentityService_ServiceDesc is the grpc.ServiceDesc for IdentityService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IdentityService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.IdentityService",
	HandlerType: (*IdentityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _IdentityService_Get_Handler,
		},
		{
			MethodName: "Put",
			Handler:    _IdentityService_Put_Handler,
		},
		{
			MethodName: "GetPid",
			Handler:    _IdentityService_GetPid_Handler,
		},
		{
			MethodName: "GetLeader",
			Handler:    _IdentityService_GetLeader_Handler,
		},
		{
			MethodName: "GetHeartbeat",
			Handler:    _IdentityService_GetHeartbeat_Handler,
		},
		{
			MethodName: "UpdateLeader",
			Handler:    _IdentityService_UpdateLeader_Handler,
		},
		{
			MethodName: "RequestElection",
			Handler:    _IdentityService_RequestElection_Handler,
		},
		{
			MethodName: "GetVectorClock",
			Handler:    _IdentityService_GetVectorClock_Handler,
		},
		{
			MethodName: "UpdateVectorClock",
			Handler:    _IdentityService_UpdateVectorClock_Handler,
		},
		{
			MethodName: "RequestSync",
			Handler:    _IdentityService_RequestSync_Handler,
		},
		{
			MethodName: "SyncComplete",
			Handler:    _IdentityService_SyncComplete_Handler,
		},
		{
			MethodName: "RequestCheckpoint",
			Handler:    _IdentityService_RequestCheckpoint_Handler,
		},
		{
			MethodName: "NotifyCheckpointDone",
			Handler:    _IdentityService_NotifyCheckpointDone_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
